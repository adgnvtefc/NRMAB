from algorithms.graphq import train_gnn_agent
from networkSim import NetworkSim as ns
import networkx as nx
import copy
from algorithms.NEW_GraphQ import GraphQ
from algorithms.graph_env import GraphEnv

# Define model parameters
input_dim = 6  # Number of node features
hidden_dim = 16  # Hidden layer size
output_dim = 1  # Q-value output

# Initialize the model
model = GraphQ(input_dim, hidden_dim, output_dim)
initial_graph = ns.build_graph_from_edgelist("./graphs/India.txt", value_low=1, value_high=2)
pos = nx.spring_layout(initial_graph)  # Positioning of nodes
cascade_prob = 0.05
config_normal = {
        "graph": copy.deepcopy(initial_graph),
        "num_nodes": len(initial_graph.nodes),
        "cascade_prob": cascade_prob,
        #arbitrary
        "stop_percent": 0.8,
        "reward_function": "normal",
        "gamma": 0.8
    }
# train_gnn_agent(config=config_normal, num_epochs=1)

# Define the environment
env = GraphEnv(config_normal)

# Train the model
model.train(env, num_episodes=100)

top_k_nodes = model.predict(initial_graph, k=3)
print("Top k nodes:", top_k_nodes)